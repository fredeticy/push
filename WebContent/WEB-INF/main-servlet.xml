<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.0.xsd   
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd    
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-4.0.xsd
    http://www.springframework.org/schema/aop   
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
            default-autowire="byName">
            
   <context:component-scan base-package="com.czm" />
   <!-- 1.开启SpringMVC注解模式 -->
   <!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter 
   (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 -->	
   <mvc:annotation-driven />
   
   <!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用"/"做整体映射 -->
	<!-- 特别说明：因为我们在 web.xml 里配置了 DispatcherServlet 的拦截路径是 "/"，所以除了动态请求外，
	静态资源（比如：http://localhost:8080/app.css） 也会被拦截，DispatcherServlet 会将它们当成一个普通请求处理，
	因此找不到对应处理器将导致错误。这里我们配置了 <mvc:default-servlet-handler /> 后，
	会在 Spring MVC 上下文中定义一个 org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
	它会像一个检查员，对进入 DispatcherServlet 的 URL 进行筛查，如果发现是静态资源的请求，就将该请求转由 Web 应用服务器默认的
	Servlet 处理，如果不是静态资源的请求，才由 DispatcherServlet 继续处理。 -->
   <mvc:default-servlet-handler />
 	<import resource="classpath:config/beans.xml"/>
 	
 	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
 	<bean class="com.czm.util.LogAspect"></bean>
 	
 	<mvc:default-servlet-handler/>
 	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 对所有.do拦截 -->
			<mvc:mapping path="/**/*.do"/>
			<!-- 对登录页不拦截 -->
			<mvc:exclude-mapping path="/login.do"/>
			<!-- <mvc:mapping path="/collect/save" />  !-->

			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.czm.handler.GlobalInterceptorHandler" />
		</mvc:interceptor>
	</mvc:interceptors> 
</beans>